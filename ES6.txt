day1
		
		
	
	1，ES6是什么：是javascript语言下一代的标准。它的目标是使得javascript语言可以用来编写复杂的大型应用程序，成为企业级开发语言
		
		
		
	2，ES6新增的语法：
		
		
		
		（1）let：用来声明变量的。
			
				
			1，特点：
				
				
				（1）不能重复来定义相同的变量
				
				
				（2）没有变量提升（也就是没有预解析），所以需要先定义再使用
				
				
				（3）定义的全局变量不会附加到window对象的属性中
					
				
				（4）具有快级作用域。
		
			
		
		（2）快级作用域：
			
			
			1，外层作用域无法读取内存作用域的变量，内存作用域可以定义外层作用域的同名变量。简单来说就是（随着当前的作用域的执行而存在，执行完毕而销毁）
		
		
			
		（3）const定义常量
			
			
			
			（1）从头到尾不需要修改的数据定义为常量
			
			
			特点：
				
				
				（1）使用常量定义的变量存储在栈内存是不可以改变的
				
				
				（2）但是定义的对象复杂数据类型的属性是可以改变的。
				
				
				（3）定义在栈内存的变量是不能改变的，但是在堆内存中的复杂数据类型可以改变
				
				
				（4）常量命名必须使用大写的名字


				（5）其他的特征和let相同
		

		（4）结构赋值
			
			
			
			1，数组的结构赋值：
				
				
				（1）它能够快速从数组中取出值保存到变量中，他的本质是给变量赋值。根据右边对应的角标赋值
			
				
					
					let [a, b, c] = [5, 9, 10];

					
					
					变量的默认值：如果不给变量赋值的话就使用原来的默认值，给变量赋值的话就使用赋值的值
						
						
						let [a,b,c,d] = [12, 34,6];

						console.log(a, b, c, d = 20);
					
					
					
					剩余的参数：如果实参的数量大于了形参数量，那么多余的实参数都会以数组的形式保存在该变量中
					
					
						let [a, b, ...c] = [1,2,45,23,6,12];

						console.log(a, b, c);
			
			
			2，实现俩个变量互换值
					

				
				（1）方法1：
				

					let a = 10;

					let b = 20;

					[a, b] = [b, a];

					console.log(a, b);
				
					
				（2）方法2：
					
					
					使用定义第三方变量来交换
				
				
			
			3，对象的结构赋值：
				
				
				
				（1）变量名和属性名一致
					
					
					let {name,age} = {name : "小美", age : 20};

					console.log(name, age);
				
				
				（2）可以为变量改名来代替
					
					
					//此时的name变量被改变成了a

					let {b, name : a} = {name : "小美"};

					console.log(b, a);
					
					
				（3）复杂的对象赋值：
			

					let obj = {

						name : "小美",
						age : 20,
						dog : {

							name : "小黄",
							age : "30",
						},
					}
					

					//可以将对象中的某一块的属性值赋值过来
					let {dog : {name, age}} = obj;

					console.log(name, age);
			
				
				（4）对象的剩余值
					
					
					let {name, ...age} = {name : "消灭", age : 20, sex : "男"};

					console.log(name, age);

			

			4，函数的扩展
				
				
				
				（1）参数的默认值：在定义一个函数时，我们可以给形参设置默认值，当用户不填入值时我们可以有一个默认的值使用。
			
					
					function getName(name="小美") {

						console.log(name);
					}

					getName();

				（2）rest参数：也就是函数的剩余参数，可以获取所有的实参个数存放到数组中，相当于arguments。主要用来获取多余的实参的个数



					function reset(...reset) {

						console.log(reset);
					}

					reset("小美", 20, "男", "中国人");


				（3）箭头函数：让代码跟简洁，箭头函数能让函数更加纯粹
					
					
					let fn = (name) => {

						console.log(name);
					}
					fn("小美");
				
					
					1，当形参只有一个参数的时候可以省略小括号


						let fn = name => {

							console.log(name);
						}
						fn("小美");
					

					2，当函数体只有一条执行语句的话可以省略大括号
					
						
						let fn = name => console.log(name);
						fn("小美");
					
					
					3，当函数体只有一条语句的话并且要写return的话，可以省略return和大括号
						
						
						let fn = age => 5 * age;

						var result = fn(5);

						console.log(result);
						

	
				（4）箭头函数和普通函数的区别：
				
		
				
					1，箭头函数内部没有arguments
					
					
					2，箭头函数内部没有this
				
	
					3，箭头函数不能new对象，不能作为构造器

				
				



			5，new Set(arr)方法：只能保存key（键）的组合，但是key不能不回保存重复的key
					
			
				
			6，new Map()：方法存入键值对形式的数组对象，通过set方法设置，get方法获取等
				

				
				（1）map原生提供三个遍历器：
			
						
					（1）.keys()：返回键名的遍历器
				
					
					（2）.values()：返回键值的遍历器
			
					
					（3）entries()：返回所有成员的遍历器
					
					
					for (let key of map.keys()) {

						
						console.log(key);
					}
			
			7，数组的扩张
				
				
				
				（1）扩展运算符：把数组中的元素一项项的展开。把一个整体的数组拆分成一项一项的。
					
					
					格式：...数组
				
					
				（2）Array.from()；将其他非数组的对象转成数组。
				
					
				（3）find()方法：参数是一个匿名函数，函数有三个参数，第一个参数是索引，第二个参数是每一项，第三个参数是整个数组，可以找出我们想要的第一个的数据，然后return true即可
			
				
				（4）findIndex()方法：和find方法一样，只不过他返回的是元素的坐标
				
				
				（5）includes()方法：判断数组是否包含某个值，返回值是true或者false。第一个参数是要查找的项，第二个参数是从什么位置开始查找。
				
			
			
			8，String的扩展：
					
				
				
				（1）includes()：是一个参数是要查找的字符串，第二个参数是从什么位置开始查找，会返回布尔类型值
					
					
				（2）startsWith()：参数字符串是否在字符串的头部或者指定位置，第二个参数是从什么位置开始查找，默认为0.返回布尔类型的值
				
					
				（3）endsWith()：参数字符串是否在字符串的尾部或者指定位置，第二个参数是从什么位置开始查找，默认为0，返回布尔类型的值
				
				
				（4）repeat()：接收一个数值，意思将字符串重复调用多少次，就会拼接多少次。
				
				
			
			9，定义对象的简写方式：
				
				
				
				（1）如果对象的属性值正好是一个变量需要的值，恰好对象的属性名和变量名相同就可以简写。
				
					
	

					var name = "网名";

					var obj = {

						name
					}

					console.log(obj.name);	
					
					
					
				（2）对象中的方法的简写：
			
		
	

					var obj = {

						name : "hahah",
						fn : function () {}
		
						//简写为
		
						fn1() {

							console.log(this.name);
						},
					}

					obj.fn1();


			


			10，ES6的降级处理：因为es6有兼容性处理，可以使用一些工具进行处理，把es6的代码转成es5的代码，列如babel工具。官网：https://www.babeljs.cn/
					
					
	


补充：
	
			
		
		
	1，正则：
		
		