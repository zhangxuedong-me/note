git的使用和方法及常用命名
	

	
	版本控制：记录一个或者若干个文件的内容变化，以便将来查看或者修改之前的版本。

	
	git介绍：
		
		
		（1）分布式：多节点化是分布式版本控制最显著的方法。每一个节点都拥有版本库
		
		
		
	
	svn：介绍
		
		
		（1）和git的功能一样，很少有人用了。
			
		
		（2）集中式：中心点是集中式版本控制最显著的特点，本库存放在中央服务器，所以缺点就是如果中央服务器坏了，那么库就会丢失
		
		
		
	
	git的图形化界面：
		
		
		
		（1）tortoise Git
		
			
		（2）git GUI
			
			
		（3）source Tree
			
		
		（4）开发工具中集成（vscode中有集成的git工具）



	

	常用的一些基础命令

	
		1，从命名界面中退出命令：exit
		
		
		2，mkdir 文件名：创建文件夹
		
		
		3，cd 目录名：进入指定目录
		
		
		4，cd ..	：返回到上一级目录
		
		
		5，ls：查看该目录下的所有的文件夹
		
		
		6，ls -a：查看文件夹及隐藏的文件夹
		
		
		7，touch（他吃） 文件名：创建文件
			
		
		8，rm 文件名：删除文件
		
		
		9，clear：清除屏幕
		
			
		10，cat（看他） 文件名：查看文件的内容
		
		
		11，less 文件名：查看文件的内容，需要按q推出
		
		
		12，上下方向键：切换历史记录
		
		
		13，Tab键：自动补全
		
		
		14，vi 文件名：创建并进入文件编辑模式
		
	
		15，i：进入插入编辑模式
		
		
		16，esc：退出插入编辑模式
			
		
		17，q：退出编辑模式，但是不保存
		
		
		18，wq：保存并退出编辑模式
		
		
		19，q!：强制退出但不保存编辑模式
	

	
	git的工作流程和常用的命令
		
			
		
		1，建立git仓库：新建一个文件夹，在此文件夹下打开git命令工具，输入命令 git init表示初始化一个git仓库
		
			
		2，git status（斯dei特斯）：查看文件的状态，如果文件是红色的表示文件只在工作区，如果是绿色的表示在暂存区，如果没有的话就是保存到了仓库中。
		
		
		3，保存到暂存区：通过命令git add .是将所有的文件保存到暂存区，如果是git add 文件名是将指定的文件保存到暂存区
		
			
		4，提交到仓库：通过命令git commit（抗慢特） -m 邮箱名第一次提交到仓库需要先设置一下邮箱账号，然后通过命令git commit -m "本次提交的说明"
		
		
		5，查看修改提交到仓库的记录：git log
		


		
		6，从工作区恢复：只在工作区修改，并且没有保存到暂存区，使用命令git checkout . 将所有的文件从工作区中恢复，git checkout -- 文件名 只是恢复某一个文件
		
		
		7，从暂存区中恢复：使用git reset HEAD 表示将所有的文件从暂存区恢复到工作区，还需要在再工作区中恢复才行。git reset HEAD 文件名只恢复某一个文件
		
		
		8，从仓库中恢复：git reset --hard（和啊的） 流水号（可以只写一部分）：表示恢复到那一次提交到仓库的记录。通过git checkout 流水号 文件名 可以指定恢复某一个文件
		
		
		9，流水号：指的是提交到仓库的记录说明，在上面有很长的一串流水号。
		
		

		分支：在不影响源代码的基础上，进行新功能的开发
		
			
			
			1，查看分支：git branch（不ruai吃）
			
				
			2，切换分支：git checkout 分支名
			
			
			3，创建分支：git branch 分支名
			
			
			4，删除分支：git branch -d 分支名：删除分支，不是删除分支上的代码
			
			
			5，新建并切换：git checkout -b 分支名
			
			
			6，合并分支：git merge（模吃） 分支名。将俩个分支上的代码合并到一个分支上
			
			
		
		远程仓库：在网站中建立仓库，可以将仓库中的文件克隆下来，然后进行修改，再次提交到远程仓库。
			
			
			
			（1）git clone（克劳） 网址.get：将远程仓库中的文件克隆下来
			
			
			（2）git push：把本地的修改再次提交到远程仓库中
			
			
			（3）git pull（pao）：把远程代码拉倒本地，如果克隆下来一次的话，下次就不用再克隆下来了，直接拉下来就可以了。

			
		
