1，可维护性代码
	
	
	（1）可理解性：其他人员可以接手的代码并且能够理解他的意图，无需开发人员完整解释
		
		
	（2）直观性：代码一看就能明白，不管操作的过程多么的复杂

		
	（3）可适应性：代码以数据上的变化不要求完全重写的方法撰写
		
		
	（4）可扩展性：在代码架构上已考虑到在未来允许对核心功能进行扩展
	
		
	
	
2，代码的约定
		
		
	
	（1）变量类型的透明：
			
		
		1，匈牙利标记法：在变量名之前加上一个或者多个字符来表示数据类型，o代表对象，s代表字符串，i代表整数，f代表浮点数，b表示布尔类型
			
			
			var oPerson = {};
			
		

		2，类型注释：在变量名的和赋值的中间加上注释。


			var person = /*  Object类型  */{}；
		
		

	
3，事件处理程序和应用逻辑
			
		
	（1）应该合理的将应用逻辑从事件处理程序中分离出来，封装到函数中，只要将事件对象中的需要用到的属性值，传入到逻辑应用中去处理即可，这对代码维护非常重要。



	
4,性能：
		
		

	（1）注意作用域
				

		
		1，访问全局变量总是要比访问局部变量慢，所有应该尽量的减少访问全局变量的次数。将全局变量定义到局部变量中来定义变量接收，这样只需要访问一次全局即可
		
			
			var doObj = document;
		
	
	
	（2）选择正确的方法
		
		
		
		1，最小化语句数量：多个变量的声明采用多个var声明会影响执行速度，可以向下面这样定义，使用一个var定义多个变量使用逗号来隔开。
			
			
			var a,b,c,d;
			
			
		
		2，插入迭代值：当使用迭代值（也就是在不同的位置进行自增和自减）的时候，竟可能的合并语句。比如：
			


			var name = values[i];

			i++;

			改成：
			
				var name = values[i++];

			
		
	（3）优化DOM交互操作
			
			
		（1）最小化现场更新：简单来说，如果页面有10个元素的话，我们每插入一个元素，页面就会更新10+1个元素，如果插入10个元素会更新20个元素，这样非常的浪费性能。
					
			
			解决办法：document.createDocumentFragment()（文档片段）调用这个方法可以将新创建的元素暂时先存放到文档片段中，等循环完成之后在循环的外面一次性的将文档片段存储的元素一次性的更新到页面。



		（2）使用事件代理：利用事件冒泡的原理，使用事件委托，将子元素的事件委托给上级代理，也可以减少不少的性能


		
		（3）优化循环：减少访问循环长度的HTMLCollection对象，每次访问访问HTMLCollection对象都是很大的开销，所有循环开始的时候，直接将数组长度赋值给一个变量即可。

	

			for (var i = 0,len=arr.length;i < len;i++) {


				
			}
		
			

		（4）尽量使用javascript的原生方法：因为原生方法是用c或者c++之类的编译型语言写出来的所以要比自定义的方法快的多
				

			
		（5）使用switch语句代替if else：如果有一系列复杂的if else语句可以转换成单个的switch语句则可以得到更快的代码，还可以通过case语句按照最可能的到达最不可能的顺序进行组织，可以进一步优化switch语句



		（6）使用innerHTML来赋值创建元素：对于大量的DOM节点插入修改使用他来创建元素性能要比其他的方法性能好。
			
		     因为在后台会创建一个html解析器，然后使用内部的DOM调用来创建DOM结构，而非基于javascript的DOM调用，由于内部的方法是编译好的而非解析执行所以执行代码的速度要快很多。
		
			

		（7）避免使用with语句：因为这个语句延长了作用域，查找变量同样耗费时间。
			
		
		（8）

			
				







